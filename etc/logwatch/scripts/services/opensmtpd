#!/usr/bin/perl

use v5.16;
use strict;
use warnings;
use re 'taint';
no warnings 'uninitialized';

use Data::Dumper;

my $re_QID       = qr/[a-z\d]{8,16}/;
my $re_IP_strict = qr/\b(25[0-5]|2[0-4]\d|[01]?\d{1,2})\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})\b/;

my ( %Opts, %Queue, %Envelopes, %Totals, %Counts, %Unmatched );

# Default values for various options.  These are used
# to reset default values after an option has been
# disabled (via undef'ing its value).  This allows
# a report to be disabled via config file or --nodetail,
# but reenabled via subsequent command line option
my %Defaults = (
   detail                      => 10,                        # report level detail
   syslog_name                 => 'smtpd',                   # service name (postconf(5), syslog_name)
   delays                      => 1,                         # show message delivery delays report
   smtpctl_path                => '/usr/sbin/smtpctl',       # path to smtpctl binary
   geoip_path                  => '/usr/bin/geoiplookup',    # path to geoiplookup binary
   subaddress_delimiter        => '+',                       # delimiter used for subaddress extension
   subaddress_strip            => 0,                         # strip the subaddress extension for cleaner logs
   ignore_local                => 0,                         # ignore lines from/to localhost (if mail is relayed through Amavisd etc)
   threshold_connections       => 0,
   threshold_senders           => 0,
   threshold_recipients        => 0,
   threshold_smtp_failures     => 0,
   threshold_auth              => 0,
   threshold_auth_failures     => 0,
   threshold_auth_ip_warning   => 3,
   threshold_relay             => 0,
   threshold_relay_failures    => 0,
   threshold_delivery          => 0,
   threshold_delivery_failures => 0
);

#
# Initialize options to defaults or to those defined in the config file.
#
$Opts{detail} = $ENV{LOGWATCH_DETAIL_LEVEL} || $Defaults{detail};

map { $Opts{$_} = $ENV{$_} || $Defaults{$_} unless exists $Opts{$_} } keys %Defaults;

my $origline;

sub unmatched() {
   $Unmatched{$origline}++;
}

#
# Unitize a number, and return appropriate printf formatting string
#
sub unitize($$) {
   my ( $fmt, $num ) = @_;
   my $kilobyte = 2**10;
   my $megabyte = 2**20;
   my $gigabyte = 2**30;
   my $terabyte = 2**40;

   if( $num >= $terabyte ) {
      $num /= $terabyte;
      $fmt .= '.3fT';
   } elsif( $num >= $gigabyte ) {
      $num /= $gigabyte;
      $fmt .= '.3fG';
   } elsif( $num >= $megabyte ) {
      $num /= $megabyte;
      $fmt .= '.3fM';
   } elsif( $num >= $kilobyte ) {
      $num /= $kilobyte;
      $fmt .= '.3fK';
   } else {
      $fmt .= 'd';
   }

   return ( $fmt, $num );
}

sub line ($$) {
   my ( $num, $text ) = @_;

   my $unit = ( $num =~ s/([a-z]|[A-Z]{1})$//o ) ? $1 : ' ';

   return sprintf("%10s%s  %s\n", $num || 0, $unit, $text );
}

#
# Strip delimiter from e-mail addresses.
#
sub strip_delimiter {
   if( $Opts{subaddress_strip} ) {
      for ( @_ ) {
         s/\Q$Opts{subaddress_delimiter}\E(\S+)@/@/o;
      }
   }
}

sub duration_to_seconds ($) {
   my $delay = shift;
   my $seconds = 0;

   if( $delay =~ /(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)/o ) {
      $seconds = ( ( $1 || 0 ) * 24 * 60 * 60 ) + ( ( $2 || 0 ) * 60 * 60 ) + ( ( $3 || 0 ) * 60 ) + ( $4 || 0 );
   }

   return int($seconds);
}

sub duration_to_text ($) {
   my $t = shift;
   my ( $s, $m, $h, $d );

   return '0s' if( $t == 0 );

   $s = $t % 60;
   $t /= 60;
   $m = $t % 60;
   $t /= 60;
   $h = $t % 24;
   $d = int( $t / 24 );

   my $ret = '';

   $ret .= $d.'d' if( $d );
   $ret .= $h.'h' if( $h );
   $ret .= $m.'m' if( $m );
   $ret .= $s.'s' if( $s );

   return $ret;

}

#
# Main processing loop
#
LINE: while ( <> ) {
   chomp;
   s/\s+$//;

   next unless length $_;

   next unless /^([A-Z][a-z]{2} [ \d]\d \d{2}:\d{2}:\d{2}) ?(\S+) $Opts{syslog_name}(?:\[\d+\]): ?((?:(\S+):)?.*)$/o;

   my ( $date, $mailhost, $p1, $service_name ) = ( $1, $2, $3, $4 || '');

   next if $service_name =~ /^(debug|imsg|io|smtp|filters|transfer|bounce|scheduler|expand|lookup|stat|rules|mproc|ramstat|smtp-out|queue-backend|mda|control|auth-reporter)/o;

   $origline = $_;

   # print "mailhost: $mailhost, servicename: $service_name, p1: $p1\n";

   if( $service_name eq 'info') {
      if( $p1 =~ /OpenSMTPD (?:.*) starting$/o ) {
         $Totals{opensmtpdstart}++;
      } else {
         # Feb 15 13:07:42 localhost smtpd[92673]: info: Table "aliases" successfully updated
         $p1 =~ s/^info:\s+//;
         $Counts{info}{$p1}++;
      }
   }

   elsif( $service_name eq '' && ( $p1 eq 'Exiting') ) {
       $Totals{opensmtpdexit}++;
   }

   # Feb 15 13:07:14 localhost smtpd[92675]: delivery: Remove for 56bde0d3348d0ccb: from=<sender@domain.com>, to=<recipient@domain.com>, rcpt=<->, delay=19m54s, stat=Removed by administrator
   # May 24 16:56:31 localhost smtpd[91612]: relay: Remove for 618e42094a85f2d4: from=<sender@domain.com>, to=<recipient@domain.com>, rcpt=<->, delay=14m7s, stat=Removed by administrator
   elsif( ( $service_name eq 'delivery' or $service_name eq 'relay') and ( $p1 =~ /Remove for (?:$re_QID): from=<(\S*)>, to=<(\S*)>, rcpt=<(?:\S*)>, delay=(?:\S*), stat=(.*)/o ) ) {
       my ( $from, $to ) = ( lc($1), lc($2) );
       $Totals{removed}++;
       $Counts{removed}{"$from -> $to"}++;
   }

   # May 24 01:00:27 localhost smtpd[91642]: relay: Expire for ca56014fb7f0bc3f: from=<@>, to=<recipient@domain.com>, rcpt=<->, delay=4d, stat=Envelope expired
   elsif( $service_name eq 'relay' and ( $p1 =~ /Expire for (?:$re_QID): from=<(\S*)>, to=<(\S*)>, rcpt=<(?:\S*)>, delay=(?:\S*), stat=(.*)/o ) ) {
       my ( $from, $to ) = ( lc($1), lc($2) );
       $Totals{expired}++;
       $Counts{expired}{"$from -> $to"}++;
   }

   # Feb 15 13:50:31 localhost smtpd[93928]: warn: queue: no return path!
   elsif( $service_name eq 'warn') {
       $p1 =~ s/^warn:\s+//;
       $Totals{warnings}++;
       $Counts{warnings}{$p1}++;
   }

   # Sep  2 16:42:20 localhost smtpd[28757]: rule #7 matched: match from any for domain domains rcpt-to recipients => filter_incoming
   elsif( $service_name eq '' && ( $p1 =~ /(?:rule #(?:\d+) matched: (.*))|no rule matched$/o ) ) {
      $Counts{SMTP}{rules}{ $1 || '-'}++;
   }

   elsif( $p1 =~ /^($re_QID) (smtp|mta|mda) (\S+)/o ) {
      my ( $qid, $protocol, $event ) = ( $1, $2, $3 );

      # print "qid: $qid protocol: $protocol event: $event\n";

      if( $protocol eq 'smtp') {
         # Aug 30 14:23:34 localhost smtpd[3866]: 26758297e509399d smtp connected address=local host=host.domain.com
         # Aug 30 14:23:34 localhost smtpd[3866]: 26758297e509399d smtp connected address=127.0.0.1 host=localhost.domain.com
         # Aug 30 14:23:34 localhost smtpd[3866]: 26758297e509399d smtp connected address=192.168.1.100 host=host.domain.com
         # address=local means the mail is originating from the host itself.
         # address=127.0.0.1 means we're receiving from spam filter etc.
         # We filter the latter out if ignore_local is set in configuration.
         if( $event eq 'connected' and ( $p1 =~ /address=(\S+) host=(\S+)/o ) ) {
            $Queue{$qid} = { hostip => $1, hostname => $2, size => 0 };

            next if ( $Opts{ignore_local} and $1 eq '127.0.0.1');

            $Totals{SMTP}{connections}++;

         }

         # Aug 30 23:18:15 localhost smtpd[44169]: e2f276e83513040f smtp tls ciphers=TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256
         elsif( $event eq 'tls' and ( $p1 =~ /ciphers=(\S+):(?:\S+):(?:\d+)/o ) ) {
            $Queue{$qid}{tls} = $1;
         }

         # Aug 30 23:18:15 localhost smtpd[44169]: e2f276e83513040f smtp authentication user=user@domain.com result=ok
         # Aug 30 23:18:15 localhost smtpd[44169]: e2f276e83513040f smtp authentication user=user@domain.com result=permfail
         elsif( $event eq 'authentication' and ( $p1 =~ /user=(\S+) result=(\S+)/o ) ) {
            my ( $user, $result, $hostip ) = ( lc($1), $2, $Queue{$qid}{hostip} );

            if( $result eq 'ok') {
               $Totals{SMTP}{auth}{success}++;
               $Counts{SMTP}{auth}{success}{$user}{$hostip}++;
            }

            elsif( $result eq 'permfail' or $result eq 'tempfail') {
               $Totals{SMTP}{auth}{failure}++;
               $Counts{SMTP}{auth}{failure}{$user}{$hostip}++;
            }

            else {
               unmatched();
               next;
            }
         }

         # Aug 30 23:18:15 localhost smtpd[44169]: e2f276e83513040f smtp message msgid=4ae29064 size=643 nrcpt=1 proto=ESMTP
         elsif( $event eq 'message' and ( $p1 =~ /msgid=(?:$re_QID) size=(\d+) nrcpt=(?:\d+) proto=(?:\S+)/o ) ) {
            my ( $hostip, $hostname, $size ) = ( $Queue{$qid}{hostip}, $Queue{$qid}{hostname}, $1 || 0 );

            $Queue{$qid}{size} = $size;

            next if ( $Opts{ignore_local} and $hostip eq '127.0.0.1');

            $Totals{SMTP}{messages}++;

            $Totals{SMTP}{bytes} += $size;

            $Counts{SMTP}{hosts}{"$hostip ($hostname)"}++;

         }

         # Aug 30 23:18:15 localhost smtpd[44169]: e2f276e83513040f smtp envelope evpid=4ae29064d45a4259 from=<sender@domain.com> to=<recipient@domain.com>
         elsif( $event eq 'envelope' and ( $p1 =~ /evpid=($re_QID) from=<(\S*)> to=<(\S+)>/o ) ) {
            my ( $evpid, $from, $to ) = ( $1, lc($2) || '-', lc($3) || '-');
            my ( $hostip, $size ) = ( $Queue{$qid}{hostip}, $Queue{$qid}{size} );

            $Envelopes{$evpid} = $size;

            next if ( $Opts{ignore_local} and $hostip eq '127.0.0.1');

            strip_delimiter( $from, $to );

            $Counts{SMTP}{senders}{$from}++;
            $Counts{SMTP}{recipients}{$to}++;

         }

         # Aug 30 14:21:32 localhost smtpd[38664]: 26758291bcd1c704 smtp failed-command command="RCPT TO: <recipient@domain.com>" result="424 4.2.4 Mailing list expansion problem: <recipient@domain.com>"
         # Aug 30 22:55:42 localhost smtpd[44169]: e2f276dd43237896 smtp failed-command command="AUTH LOGIN (password)" result="535 Authentication failed"
         # Sep  3 12:23:58 localhost smtpd[21461]: e50dd611bbf724b2 smtp failed-command command="MAIL FROM: <user@domain.com>" result="530 5.5.1 Invalid command: Must issue a STARTTLS command first"
         # Sep  3 02:01:01 localhost smtpd[21461]: e50dd2eb3c2bb2ab smtp failed-command command="RCPT To:<recipient@domain.com>" result="550 Invalid recipient: <recipient@domain.com>"
         elsif( ( $event eq 'failed-command' and ( $p1 =~ /command="(.*?)" result="(.*?)"$/o ) ) or
                ( $event eq 'bad-input' and ( $p1 =~ /(?:(.*?))result="(.*?)"$/o ) ) ) {
            my ( $command, $result ) = ( $1, $2 );

            # Ignore authentication failures.
            # We already took care of these above.
            #
            next if( $result =~ /^535 /);

            if( $result eq '530 5.5.1 Invalid command: Must issue a STARTTLS command first') {
               $command = uc($1) if( $command =~ /^(MAIL FROM):/i );
               $Queue{$qid}{tls} = 'TLS/STARTTLS not issued' if( $result eq '530 5.5.1 Invalid command: Must issue a STARTTLS command first');
            } elsif( $result =~ /^(550 Invalid recipient): <(.*)>$/ ) {
               ( $result, $command ) = ( $1, $2 );
            } elsif( !$command ) {
               $command = "$Queue{$qid}{hostip} ($Queue{$qid}{hostname})";
            }

            $Totals{SMTP}{failure}++;

            $Counts{SMTP}{failure}{$result}{$command}++;

         }

         # Aug 30 23:16:04 localhost smtpd[4416]: e2f276e4a679bd8c smtp disconnected reason=quit
         elsif( $event eq 'disconnected') {
            if( exists($Queue{$qid}) ) {
               my $data = delete $Queue{$qid};

               next if ( $Opts{ignore_local} and $data->{hostip} eq '127.0.0.1');

               $Totals{SMTP}{tls}{ $data->{tls} || 'TLS OFF'}++;
            }
         }

         else {
            unmatched();
            next;
         }
      }

      elsif( $protocol eq 'mta') {
         next if $event =~ /^(connected)$/o;

         # Aug 30 23:15:48 localhost smtpd[44169]: e2f276e39386ccb3 mta connecting address=smtp://127.0.0.1:10026 host=localhost.domain.com
         if( $event eq 'connecting' and ( $p1 =~ /address=(?:\S+):\/\/(\S+):(\d+) host=(\S+)/o ) ) {
            $Queue{$qid} = { hostip => $1, port => $2, hostname => $3, tls => 0, cipher => 0 };

            # print "qid: $qid hostip: $1 port: $2 hostname: $3\n";

            next if ( $Opts{ignore_local} and $1 eq '127.0.0.1');

            $Totals{MTA}{connections}++;

         }

         # Aug 30 23:15:54 localhost smtpd[44169]: e2f276e7e4266f44 mta tls ciphers=TLSv1.3:TLS_AES_256_GCM_SHA384:256
         elsif( $event eq 'tls' and ( $p1 =~ /ciphers=(\S+):(?:\S+):(?:\d+)/o ) ) {
            $Queue{$qid}{tls} = $1;
         }

         # Sep  3 10:04:29 localhost smtpd[21461]: e50dd49d86fb3509 mta server-cert-check result="success"
         # Sep  3 10:04:29 localhost smtpd[21461]: e50dd49d86fb3509 mta server-cert-check result="failure"
         elsif( $event eq 'server-cert-check' and ( $p1 =~ /result="(\S+)"/o ) ) {
            my $result = $1;

            next if ( $Opts{ignore_local} and $Queue{$qid}->{hostip} eq '127.0.0.1');

            $Totals{MTA}{tls}{'Server certificate checks failed'}++ if( $result eq 'failure');

         }

         # Aug 30 11:56:55 localhost smtpd[38664]: 26758286f4235daf mta disconnected reason=quit messages=1
         # Aug 30 23:15:54 localhost smtpd[44169]: e2f276e7e4266f44 mta error reason=SSL certificate check failed
         # Sep  8 21:34:32 localhost smtpd[15821]: 2c04ac5259744e2f mta error reason=IO Error: Connection refused
         elsif( $event eq 'disconnected' or $event eq 'error') {
            if( exists($Queue{$qid}) ) {
               my $data = delete $Queue{$qid};

               next if ( $Opts{ignore_local} and $data->{hostip} eq '127.0.0.1');

               $Totals{MTA}{tls}{ $data->{tls} }++ if( $data->{tls} );
            }

            $Totals{MTA}{failure}++ if( $event eq 'error');

         }

         # Aug 30 11:56:45 localhost smtpd[38664]: 26758286f4235daf mta delivery evpid=9d7c6703307fd2a4 from=<sender@domain.com> to=<recipient@domain.com> rcpt=<-> source="192.168.1.4" relay="192.168.1.3 (host.domain.com)" delay=0s result="Ok" stat="250 2.0.0: a9f0dc86 Message accepted for delivery"
         # Aug 29 03:34:13 localhost smtpd[11395]: 9e96d1ea08aa38a1 mta delivery evpid=f746881a7b91cc75 from=<sender@domain.com> to=<recipient@domain.com> rcpt=<recipient@domain.com> source="127.0.0.1" relay="127.0.0.1 (localhost.domain.com)" delay=10s result="Ok" stat="250 2.0.0 from MTA(smtp:[127.0.0.1]:10027): 250 2.0.0 aafc7d2c Message accepted for delivery"
         elsif( $event eq 'delivery' and ( $p1 =~ /evpid=($re_QID) from=<(\S*)> to=<(\S+)> rcpt=<(\S+)> source="(\S+)" relay="(\S+)(?:\s\((\S+)\))?" delay=(\S+) result="(\S+)" stat="(.*?)"/o ) ) {
            my ( $evpid, $from, $to, $origto, $source, $relayhostip, $relayhost, $delay, $result, $status ) = ( $1, lc($2) || '-', lc($3), lc($4), $5, $6, $7, $8, $9, $10 );
            my $size = delete $Envelopes{$evpid};

            # Always display failed local transfers.
            #
            next if ( $Opts{ignore_local} and $relayhostip eq '127.0.0.1' and $result eq 'Ok');

            my $destination = ( $relayhostip eq '127.0.0.1') ? 'local' : 'remote';

            $Totals{MTA}{$destination}{messages}++;
            $Counts{MTA}{$destination}{hosts}{"$relayhostip ($relayhost)"}++ if( $destination eq 'remote');

            # print "from: $from, to: $to, rcpt: $origto, src: $source, relay: $relayhostip ($relayhost) delay: $delay"."s, result: $result\nstat: $status\n";

            if( $result eq 'Ok') {

               $Totals{MTA}{$destination}{success}++;
               $Totals{MTA}{$destination}{bytes} += $size;

               $delay = duration_to_seconds($delay);

               $Totals{MTA}{$destination}{delay} = $delay unless $Totals{MTA}{$destination}{delay} and $Totals{MTA}{$destination}{delay} gt $delay;

               strip_delimiter( $from, $to );

               $Counts{MTA}{$destination}{recipients}{$to}{messages}++;
               $Counts{MTA}{$destination}{recipients}{$to}{bytes} += $size;

            }

            else {
               $Totals{MTA}{$destination}{failure}++;
               $Counts{MTA}{$destination}{failure}{ ( $status =~ /^(\d{3} \d+.\d+.\d+) (?:.*?)$/o ) ? $1 : $status }{$to}++;
            }
         }

         else {
            unmatched();
            next;
         }
      }

      elsif( $protocol eq 'mda') {
         # Aug 30 03:40:03 localhost smtpd[28220]: 1dac3318d674b616 mda delivery evpid=f3e788709da5a0e6 from=<sender@host.com> to=<recipient@host.com> rcpt=<recipient@host.com> user=3 delay=0s result=Ok stat=Delivered
         if( $event eq 'delivery' and ( $p1 =~ /evpid=($re_QID) from=<(\S*)> to=<(\S+)> rcpt=<(\S+)> user=(?:\S+) delay=(\S+) result=(\S+) stat=(.+)/o )) {
            my ( $evpid, $from, $to, $origto, $delay, $result, $status ) = ( $1, lc($2) || '-', lc($3), lc($4), $5, $6, $7, $8 );
            my $size = delete $Envelopes{$evpid};

            # print "from: $from to: $to rcpt: $origto delay: ".$delay." result: $result status: $status\n";

            strip_delimiter( $from, $to );

            if( $result eq 'Ok') {
               $Totals{MDA}{success}++;
               $Totals{MDA}{bytes} += $size;
               $Counts{MDA}{success}{$to}{messages}++;
               $Counts{MDA}{success}{$to}{bytes} += $size;
            } else {
               $Totals{MDA}{failure}++;
               $Counts{MDA}{failure}{$status}{$to}++;
            }

            $delay = duration_to_seconds($delay);

            $Totals{MDA}{delay} = $delay unless $Totals{MDA}{delay} and $Totals{MDA}{delay} gt $delay;

         } else {
            unmatched();
            next;
         }
      }

      else {
         unmatched();
         next;
      }
   }

   else {
      next if $p1 =~ /^pony express:|commands executed from aliases run with smtpd privileges/;
      unmatched();
      next;
   }

}

sub center($;$;$) {
   my ( $text, $padding, $width )  = @_;
   $width = 75 unless $width;
   $padding = ( $padding || ' ') x int( ( $width - length $text ) / 2 - 1 );
   return sprintf "%s %s %s\n", $padding, $text, $padding;
}

sub geoip($$$) {
   my ( $bin, $dat, $ip ) = @_;

   return $ip unless $bin and $dat;

   chomp( my $country = `$bin -f $dat "$ip" | cut -d':' -f2-`);

   return ( $country =~ /(\S+), (.*)/o ) ? sprintf "%s [%s, %s]", $ip, $1, $2 : $ip;
}

sub print_summary() {
   my ( $var, @ret );

   print line( $var, "OpenSMTPD started") if ( ( $var = delete $Totals{opensmtpdstart} ) > 0 );
   print line( $var, "OpenSMTPD exited") if ( ( $var = delete $Totals{opensmtpdexit} ) > 0 );

   # Print the mail queue.
   my $smtpctl = $Opts{smtpctl_path};

   if( -x $smtpctl ) {
      chomp( my $num = `$smtpctl show queue | wc -l`);
      print line( $num, "Queued messages") if( $num > 0 );
   } else {
      print "*** Unable to access message queue: smtpctl not in $smtpctl ***\n";
   }

   if( $Totals{expired} ) {
      print line( delete $Totals{expired}, "Expired messages");
   }

   if( $Totals{removed} ) {
      print line( delete $Totals{removed}, "Removed messages");
   }

   if( $Totals{warnings} ) {
      print line( delete $Totals{warnings}, "Warnings");
   }

   my ( $geoip_bin, $geoip_dat ) = ( $ENV{geoip_bin}, $ENV{geoip_dat} );

   if( defined $geoip_bin or defined $geoip_dat ) {
      unless( -x $geoip_bin ) {
         print "*** Unable to perform GeoIP lookups: missing geoiplookup binary in $geoip_bin ***\n";
         undef $geoip_bin;
      }
      unless( -e $geoip_dat ) {
         print "*** Unable to perform GeoIP lookups: missing geoiplookup database in $geoip_dat ***\n";
         undef $geoip_dat;
      }
   }

   if( ( $var = $Totals{SMTP} ) ) {
      my ( $format, $bytes ) = unitize('%', delete $var->{bytes} || 0 );

      print "\n".center('SMTP', '-')."\n";

      print line( delete $var->{connections}, 'Connections');

      for my $key ( sort { $a cmp $b } keys %{ $var->{tls} } ) {
         print line( delete $var->{tls}{$key}, $key );
      }

      delete $var->{tls} unless keys %{ $var->{tls} };

      print line( delete $var->{messages}, 'Incoming messages');
      print line( sprintf( $format, $bytes ), 'Incoming bytes');

      if( $var->{auth} ) {
         print line( delete $var->{auth}{success}, 'Successful authentications') if( $var->{auth}{success} );
         print line( delete $var->{auth}{failure}, 'Failed authentications') if( $var->{auth}{failure} );

         delete $var->{auth};
      }

      print line( delete $var->{failure}, 'Transfers failed') if( $var->{failure} );

      delete $Totals{SMTP} unless ( keys %{ $Totals{SMTP} } );

   }

   if( ( $var = $Totals{MTA} ) ) {
      my @arr;

      print "\n".center('MTA', '-')."\n";

      print line( delete $var->{connections}, 'Connections');
      print line( delete $var->{failure}, 'Failures') if( $var->{failure} );

      for my $key ( sort { $a cmp $b } keys %{ $var->{tls} } ) {
         print line( delete $var->{tls}{$key}, $key );
      }

      delete $var->{tls} unless keys %{ $var->{tls} };

      print "\n";

      sub print_mta ($$) {
         my ( $mode, $var ) = @_;
         my ( $format, $bytes ) = unitize('%', delete $var->{bytes} || 0 );
         my $ret = "";

         $ret .= line(' ', '--- '.ucfirst($mode).' ---');
         $ret .= line( delete $var->{success}, sprintf("%-40s %8s", 'Messages transferred', sprintf( $format, $bytes ) ) ) if( $var->{success} );
         $ret .= line( delete $var->{failure}, 'Transfer attempts failed') if( $var->{failure} );
         $ret .= line('=', '');
         $ret .= line( delete $var->{messages}, 'Total transfer attempts') if( $var->{messages} );
         $ret .= line( duration_to_text( delete $var->{delay} ), 'Max delay');

         return $ret;

      }

      for my $key ( keys %{ $var } ) {
         push @arr, print_mta( $key, $var->{$key} );
         delete $var->{$key} unless ( keys %{ $var->{$key} } );
      }

      print join "\n", @arr;

      delete $Totals{MTA} unless ( keys %{ $Totals{MTA} } );

   }

   if( ( $var = $Totals{MDA} ) ) {
      my $ret = "";

      print "\n".center('MDA', '-')."\n";

      my ( $format, $bytes ) = unitize('%', delete $var->{bytes} || 0 );

      $ret .= line( delete $var->{success}, sprintf("%-40s %8s", 'Messages delivered', sprintf( $format, $bytes ) ) ) if( $var->{success} );
      $ret .= line( delete $var->{failure}, 'Delivery attempts failed') if( $var->{failure} );
      $ret .= line( duration_to_text( delete $var->{delay} ), 'Max delay');

      print $ret;

      delete $Totals{MDA} unless keys %{ $Totals{MDA} };

   }

   if( ( $var = $Counts{SMTP} ) ) {
      push @ret, count('Connections from', $var, 'hosts', $Opts{threshold_connections}, 1 );
      push @ret, count('Rules matched', $var, 'rules', 0, 1 );
      push @ret, count('Senders', $var, 'senders', $Opts{threshold_senders} );
      push @ret, count('Recipients', $var, 'recipients', $Opts{threshold_recipients} );

      if( $var->{failure} ) {
         for my $key ( sort { $a cmp $b } keys %{ $var->{failure} } ) {
            for my $ip ( keys %{ $var->{failure}{$key} } ) {
               $var->{failure}{$key}{ geoip( $geoip_bin, $geoip_dat, $ip ) } = delete $var->{failure}{$key}{$ip};
            }

            push @ret, count( $key, $var->{failure}, $key, $Opts{threshold_smtp_failures}, 1 );
         }

         delete $var->{failure};

      }

      if( $var->{auth} ) {
         if( $var->{auth}{success} ) {
            my $success = auth_summary('Authenticated users', $var->{auth}{success}, $Opts{threshold_auth}, $geoip_bin, $geoip_dat );

            if( $success ) {
               push @ret, $success;
            }
         }

         if( $var->{auth}{failure} ) {
            my $failures = auth_summary('Authentication failures', $var->{auth}{failure}, $Opts{threshold_auth_failures}, $geoip_bin, $geoip_dat );

            if( $failures ) {
               push @ret, $failures;
            }
         }

         delete $var->{auth};

      }

      delete $Counts{SMTP} unless keys %{ $Counts{SMTP} };

   }

   if( ( $var = $Counts{MTA} ) ) {
      for my $destination ( keys %{ $var } ) {
         push @ret, count("Relay to $destination hosts", $var->{$destination}, 'hosts', $Opts{threshold_relay}, 1 ) if( $var->{$destination}{hosts} );

         if( $var->{$destination}{recipients} ) {
            map {
               my ( $fmt, $size ) = unitize('%', $var->{$destination}{recipients}{$_}{bytes} );
               my $messages = $var->{$destination}{recipients}{$_}{messages};

               delete $var->{$destination}{recipients}{$_};

               $var->{$destination}{recipients}{ sprintf("%-40s %8s", $_, sprintf( $fmt, $size ) ) } = $messages;

            } keys %{ $var->{$destination}{recipients} };

            push @ret, count("Relay to $destination recipients", $var->{$destination}, 'recipients', $Opts{threshold_relay} );

         }

         if( $var->{$destination}{failure} ) {
            use Text::Wrap qw( wrap $columns );
            $columns = 75;
            for my $key ( sort { $a cmp $b } keys %{ $var->{$destination}{failure} } ) {
               push @ret, count( wrap("", "     ", ucfirst($destination).' relay failed with '.$key ), $var->{$destination}{failure}, $key, $Opts{threshold_relay_failures} );
            }

            delete $var->{$destination}{failure};

         }

         delete $var->{$destination} unless keys %{ $var->{$destination} };
      }

      delete $Counts{MTA} unless keys %{ $Counts{MTA} };

   }

   if( ( $var = $Counts{MDA} ) ) {
      if( $var->{success} ) {
         map {
            my ( $fmt, $size ) = unitize('%', $var->{success}{$_}{bytes} );
            my $messages = $var->{success}{$_}{messages};

            delete $var->{success}{$_};

            $var->{success}{ sprintf("%-40s %8s", $_, sprintf( $fmt, $size ) ) } = $messages;

         } keys %{ $var->{success} };

         push @ret, count('Local delivery via MDA', $var, 'success', $Opts{threshold_delivery} );
      }

      if( $var->{failure} ) {
         for my $key ( sort { $a cmp $b } keys %{ $var->{failure} } ) {
            push @ret, count("Local delivery via MDA failed with:\n    $key", $var->{failure}, $key, $Opts{threshold_delivery_failures} );
         }

         delete $var->{failure};

      }

      delete $Counts{MDA};

   }

   if( $Counts{info} ) {
      push @ret, count('Info', \%Counts, 'info');
      delete $Counts{info};
   }

   $Counts{warnings}{'Unclean queue items (no disconnect logged)'} = keys %Queue if ( keys %Queue );
   $Counts{warnings}{'Unclean envelopes (no disconnect logged)'} = keys %Envelopes if ( keys %Envelopes );

   if( $Counts{warnings} ) {
      push @ret, count('Warnings', \%Counts, 'warnings');
      delete $Counts{warnings};
   }

   if( $Counts{expired} ) {
      push @ret, count('Expired messages', \%Counts, 'expired');
      delete $Counts{expired};
   }

   if( $Counts{removed} ) {
      push @ret, count('Removed messages', \%Counts, 'removed');
      delete $Counts{removed};
   }

   @ret = grep /\S/, @ret;

   if( @ret ) {
      print "\n".center('Details', '-')."\n";
      print join("\n", @ret );
   }

   # print "\nQueue: ".Dumper(%Queue)."\n" if ( keys %Queue );
   # print "\nEnvelopes: ".Dumper(%Envelopes)."\n" if ( keys %Envelopes );

   print "\nTotals not printed: ".Dumper(%Totals)."\n" if ( keys %Totals );
   print "\nCounts not printed: ".Dumper(%Counts)."\n" if ( keys %Counts );

}

sub ipcmp($$) {
   my ( $a, $b ) = @_;
   return pack('C4' => $a =~ /^$re_IP_strict/) cmp pack('C4' => $b =~ /^$re_IP_strict/ );
}

sub title($) {
   my $title = shift;
   return "  $title:\n";
}

sub count($$$;$;$) {
   my ( $title, $arr, $key, $threshold, $ip ) = @_;
   my $var = $arr->{$key};
   my $ret;

   $threshold = 0 unless $threshold;

   if( ( $var = $arr->{$key} ) ) {
      foreach my $k ( sort { $var->{$b} <=> $var->{$a} or ( $ip ? ipcmp( $a, $b ) : $a cmp $b ) } keys %{ $var } ) {
         if( $var->{$k} gt $threshold ) {
            $ret .= line( $var->{$k}, $k );
         }
      }

      delete $arr->{$key};

   }

   return $ret ? title( $title . ( $threshold > 0 ? " (threshold of $threshold)" : "") ) . $ret : "";

}

sub auth_summary($$$$$) {
   my ( $title, $arr, $threshold, $geoip_bin, $geoip_dat ) = @_;

   $threshold = 0 unless $threshold;

   if( $arr ) {
      my $ret = '';

      foreach my $user ( sort { $arr->{$b} <=> $arr->{$a} or $a cmp $b } keys %{ $arr } ) {
         my ( $iptotal, $ipstr, $ips ) = ( 0, '', $arr->{$user} );
         my $ipcount = keys %{ $ips };

         for my $ip ( sort { $ips->{$b} <=> $ips->{$a} or ipcmp( $a, $b ) } keys %{ $ips } ) {
            $iptotal += $ips->{$ip};
            $ipstr   .= sprintf("%16s  %s\n", $ips->{$ip}, geoip( $geoip_bin, $geoip_dat, $ip ) );
         }

         if( $iptotal > $threshold or $ipcount > $Opts{threshold_auth_ip_warning} ) {
            $ret .= line( $iptotal, $user . ( $ipcount > $Opts{threshold_auth_ip_warning} ? "\n             *** WARNING! Logins from $ipcount IP addresses (threshold of $Opts{threshold_auth_ip_warning}) ***" : "") ) . $ipstr;
         }
      }

      return unless $ret ne '';

      return title( $title . ( $threshold > 0 ? " (threshold of $threshold)" : "") ) . $ret;

   }
}

print_summary();

#
# Finally, print any unmatched lines
#
if( keys %Unmatched ) {
   print "\n**Unmatched Entries**\n";

   foreach my $line ( sort { $Unmatched{$b} <=> $Unmatched{$a} } keys %Unmatched ) {
      printf "   $line: $Unmatched{$line} Time(s)\n";
   }
}

# vi: shiftwidth=3 tabstop=3 syntax=perl et
# Local Variables:
# mode: perl
# perl-indent-level: 3
# indent-tabs-mode: nil
# End: